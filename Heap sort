'''
算法：化解问题--归纳结论--得出结果

'''
import random

'''
树结构：  目录结构
    定义：可以递归定义的数据结构 ， 有n个节点组成的集合
    概念：
        根节点、叶子节点
        树的深度-树的高度-最大高度
        树的度-最多分了几个叉
        孩子节点、父节点
        子树
二叉树：每个节点最多有两个孩子节点-左孩子节点&右孩子结点
    满二叉树：最后一层是满的
    完全二叉树：左侧先满的二叉树
    二叉树存储方式：链式存储方式 顺序存储方式

堆：特殊的完全二叉树
    大根堆：值大在上
    小根堆：值小在上
    
堆排序：顺序存储方式--使用列表存储
    左孩子
    父节点i：孩子节点2i+1
    右孩子
    父节点i：孩子节点2i+2
    孩子找父亲
    孩子节点i：父节点(i-1)//2
    
    堆的向下调整 -- 省、县、乡领导级别
        挨个出数

'''

# 堆排序 O(nlogn)
def sift(li, low, high):
    '''

    :param li: 列表
    :param low: 堆的根节点
    :param high: 堆最后一个元素
    :return:
    '''
    i = low  # i最开始指向根节点
    j = 2 * i + 1  # j开始时左孩子
    tmp = li[low]  # 把堆顶存起来
    while j <= high:
        if j + 1 <= high and li[j + 1] > li[j]:
            j = j + 1
        if li[j] > tmp:
            li[i] = li[j]
            i = j
            j = 2 * i + 1
        else:
            li[i] = tmp
            break
    else:
        li[i] = tmp


def heap_sort(li):
    n = len(li)
    # 构造堆
    for i in range((n - 2) // 2, -1, -1):
        # i表示构建堆的时候调整部分的根的下标
        sift(li, i, n - 1)

    for i in range(n - 1, -1, -1):
        li[0], li[i] = li[i], li[0]
        sift(li, 0, i - 1)


li = [i for i in range(10)]
random.shuffle(li)
print(li)
heap_sort(li)
print(li)
